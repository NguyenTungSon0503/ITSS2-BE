generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum Status {
  PENDING
  APPROVE
  REJECT
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @db.VarChar(50)
  username   String     @db.VarChar(50)
  password   String     @db.VarChar(255)
  avatar_url String?    @db.VarChar(255)
  role       Role       @default(USER)
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  updated_at DateTime   @default(now()) @db.Timestamptz(6)
  applyJobs  ApplyJob[]

  @@map("users")
}

model Company {
  id           Int      @id @default(autoincrement())
  name         String   @db.VarChar(50)
  email        String   @db.VarChar(50)
  website      String?  @db.VarChar(50)
  phone_number String   @db.VarChar(20)
  hust_partner Boolean  @default(false)
  logo_url     String   @db.VarChar(255)
  address      String   @db.VarChar(255)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)
  jobs         Job[]

  @@map("companies")
}

model Job {
  id                  Int            @id @default(autoincrement())
  title               String         @db.VarChar(255)
  description         String         @db.Text
  requirements        String?        @db.Text
  advantages          String?        @db.Text
  company_id          Int
  company             Company        @relation(fields: [company_id], references: [id])
  salary_min          Int
  salary_max          Int
  years_of_experience Int
  job_location        String         @db.VarChar(255)
  thumbnail_url       String         @db.VarChar(255)
  is_domestic         Boolean        @default(false)
  created_at          DateTime       @default(now()) @db.Timestamptz(6)
  updated_at          DateTime       @default(now()) @db.Timestamptz(6)
  applyJobs           ApplyJob[]
  jobTypeRelations    JobTypeToJob[]

  @@map("jobs")
}

model JobType {
  id   Int            @id @default(autoincrement())
  name String         @db.VarChar(255)
  jobs JobTypeToJob[]

  @@map("job_types")
}

model JobTypeToJob {
  id     Int     @id @default(autoincrement())
  job    Job     @relation(fields: [jobId], references: [id])
  jobId  Int
  type   JobType @relation(fields: [typeId], references: [id])
  typeId Int

  @@map("job_type_to_job")
}

model Field {
  id     Int      @id @default(autoincrement())
  name   String   @db.VarChar(255)
  majors Majors[]

  @@map("fields")
}

model Majors {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(255)
  field   Field  @relation(fields: [fieldId], references: [id])
  fieldId Int

  @@map("majors")
}

model ApplyJob {
  id       Int      @id @default(autoincrement())
  user_id  User     @relation(fields: [userId], references: [id])
  job_id   Job      @relation(fields: [jobId], references: [id])
  userId   Int
  jobId    Int
  status   Status   @default(PENDING)
  apply_at DateTime @default(now()) @db.Timestamptz(6)
  message  String?  @db.Text
  cv_url   String   @db.VarChar(255)

  @@map("apply_jobs")
}
